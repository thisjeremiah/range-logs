import React from 'react'
import { propSatisfies, contains, curry } from 'ramda'
import { withProps } from 'recompose'
import PropTypes from 'prop-types'
import { List, AutoSizer } from 'react-virtualized'
import 'styled-components-tachyons/variables.css'
import RangeLogsRow from './RangeLogsRow'
import { rangeInRange } from './utils'

const propContains = curry((name, value, obj) =>
  propSatisfies(contains(value), name, obj)
)

const inRange = curry(({ start, end }, { rangeStart, rangeEnd }) =>
  rangeInRange(start, end, rangeStart, rangeEnd)
)

const withRowRenderer = list => ({
  key,
  index,
  isScrolling,
  isVisible,
  style
}) => <RangeLogsRow key={key} style={style} {...list[index]} />

const RangeLogs = props =>
  <AutoSizer>
    {({ width, height }) =>
      <List
        className="RangeLogs"
        width={width}
        height={height}
        rowCount={props.logs.length}
        rowHeight={40}
        rowRenderer={withRowRenderer(props.logs)}
      />}
  </AutoSizer>

RangeLogs.propTypes = {
  logs: PropTypes.array.isRequired,
  range: PropTypes.shape({
    start: PropTypes.number.isRequired,
    end: PropTypes.number.isRequired
  }),
  filter: PropTypes.string
}

const enhance = withProps(({ logs, filter, range }) => ({
  logs: filter
    ? range
      ? logs.filter(propContains('message', filter)).filter(inRange(range))
      : logs.filter(propContains('message', filter))
    : range ? logs.filter(inRange(range)) : logs
}))

export default enhance(RangeLogs)
